import store from '../store'
import { startGame } from 'actions/game'

class {
  onCreate() {
    this.state = {
      loc: 'main',
      slots: [],
      selectedSlot: -1,
      pendingDeleteSlot: '',
      closeStars: [],
      farStars: [],
    }
    for (let i = 0; i < 100; i++) {
      this.state.closeStars.push({
        size: Math.random() * 0.3 + 0.2,
        left: Math.random() * 100,
        top: Math.random() * 100,
        opacity: Math.random()+'',
      })
    }
    for (let i = 0; i < 200; i++) {
      this.state.farStars.push({
        size: Math.random() * 0.2 + 0.2,
        left: Math.random() * 100,
        top: Math.random() * 100,
        opacity: Math.random()*0.8+'',
      })
    }

  }
  onMount() {
    this.refreshSaves()
  }
  refreshSaves() {
    // TODO: Load saved files into slots.
    /*window.resolveLocalFileSystemURL(cordova.file.dataDirectory, fs => {
      fs.getDirectory('saves', {create: false}, dir => {
        let reader = dir.createReader()
        reader.readEntries(entries => {
          this.state.slots = []
          entries.forEach(entry => {
            if (entry.name.endsWith('.json')) {
              let saveName = entry.name.slice(0, -5)
              let exists = this.state.slots.indexOf(saveName)
              if (exists === -1) {
                this.state.slots.push(saveName)
              }
            }
          })
        }, err => {
          console.log('err', err)
        })
      }, err => {
        console.log('err', err)
      })
    }, err => {
      console.log('main dir err', err)
    })*/
  }
  handleMain(act) {
    this.state.loc = act
    if (act === 'continue') this.refreshSaves()
  }
  handleEmbark(act) {
    if (act === 'embark') {
      store.dispatch(startGame(''))
    } else if (act === 'back') {
      this.state.loc = 'main'
    }
  }
  handleContinue(act) {
    if (act === 'back') {
      this.state.loc = 'main'
    } else if (act === 'embark') {
      if (this.state.selectedSlot < 0 || this.state.selectedSlot >= this.state.slots.length) return
      store.dispatch(startGame(this.state.slots[this.state.selectedSlot]))
    }
  }
  handleSlotSelect(which) {
    this.state.selectedSlot = which
  }
  toggleDeleteMode(slotName) {
    if (slotName === this.state.pendingDeleteSlot) {
      this.state.pendingDeleteSlot = ''
    } else {
      this.state.pendingDeleteSlot = slotName
    }
  }
  deleteSlot(slotName) {
    /*window.resolveLocalFileSystemURL(cordova.file.dataDirectory, fs => {
      fs.getFile(`saves/${slotName}.json`, {create: false}, fileEntry => {
        fileEntry.remove(ok => {
          this.refreshSaves()
        }, err => {
          console.log('deleteSlot', err)
        })
      }, err => {
        console.log('deleteSlot', err)
      })
    }, err => {
      console.log('deleteSlot', err)
    })*/
  }
}

style {
  .Menu {
    display: flex;
    flex-direction: column;
    justify-content: center;
    color: white;
  }
  .Menu__pair {
    display: flex;
    justify-content: center;
  }
  .Menu__item {
    margin: .5em;
    padding: .5em;
    text-transform: uppercase;
  }
  .Slots {
  }
  .Slots__item {
  }
  .Slots__item.-selected {
    border: 1px solid red;
  }
  /* shiny stuff */
  .Menu__title header {
    background: -webkit-linear-gradient(white, #38495a);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-size: 8vw;
  }
  .Menu__stars {
    position: absolute;
    width: 100vw;
    height: 100vh;
  }
  .Menu__stars.-scrollingSlow {
    animation: starScrolling 80s linear infinite;
  }
  .Menu__stars.-scrollingFast {
    animation: starScrolling 40s linear infinite;
  }

  .Menu__star {
    position: absolute;
    background: #fff;
    border-radius: 1em;
  }
  .Menu__Background {
    position: absolute;
    left: 0;
    top: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    z-index: -1;
    pointer-events: none;
    background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
  }
  @keyframes starScrolling {
    from {
      transform: translateY(0);
    }
    to {
      transform: translateY(-100%);
    }
  }
}

div.Menu__Background
  div.Menu__stars.-scrollingFast
    for|star| of=state.closeStars
      div.Menu__star style={left: star.left+'vw', top: star.top+'vh', width: star.size+'vmin', height: star.size+'vmin', opacity: star.opacity}
      div.Menu__star style={left: star.left+'vw', top: 100+star.top+'vh', width: star.size+'vmin', height: star.size+'vmin', opacity: star.opacity}
  div.Menu__stars.-scrollingSlow
    for|star| of=state.farStars
      div.Menu__star style={left: star.left+'vw', top: star.top+'vh', width: star.size+'vmin', height: star.size+'vmin', opacity: star.opacity}
      div.Menu__star style={left: star.left+'vw', top: 100+star.top+'vh', width: star.size+'vmin', height: star.size+'vmin', opacity: star.opacity}
if(state.loc === 'main')
  div.Menu__title
    header -- Deep Space Marketeer
  nav.Menu
    button.Menu__item on-click('handleMain', 'embark') -- embark
    button.Menu__item on-click('handleMain', 'continue') -- continue
else-if(state.loc === 'embark')
  div -- The universe is dominated by inter-system trade, smuggling, and piracy. You, having spent your life bound to your home planet, have finally saved up enough money for a basic runner-class ship. A new world awaits you, filled with danger, adventure, and most of all, wealth!
  label
    span -- name
    input value='Player'
  nav.Menu
    nav.Menu__pair
      button.Menu__item on-click('handleEmbark', 'back') -- back
      button.Menu__item on-click('handleEmbark', 'embark') -- embark
else-if(state.loc === 'continue')
  div.Slots
    for|slotName, slotIndex| of=state.slots
      div.Slots__item class={'-selected': state.selectedSlot===slotIndex} on-click('handleSlotSelect', slotIndex)
        div.Slots__item__name -- ${slotName}
        if(state.pendingDeleteSlot === slotName)
          button.Slots__item__cancel on-click('toggleDeleteMode', slotName) -- cancel
          button.Slots__item__confirm on-click('deleteSlot', slotName) -- confirm
        else
          button.Slots__item__delete on-click('toggleDeleteMode', slotName) -- delete
  nav.Menu
    nav.Menu__pair
      button.Menu__item on-click('handleContinue', 'back') -- back
      button.Menu__item on-click('handleContinue', 'embark') -- embark