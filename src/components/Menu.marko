import store from '../store'
import { startGame } from 'actions/game'
import i18next from 'i18next'
import pkg from '../../package.json'

class {
  onCreate() {
    this.state = {
      loc: 'main',
      slots: [],
      selectedSlot: -1,
      pendingDeleteSlot: '',
      closeStars: [],
      farStars: [],
      captainName: '',
    }
    this.captains = [
      'Picard',
      'Kirk',
      'Sisko',
      'Janeway',
      'Solo',
      'Reynolds',
      'Adama',
      'Leela',
      'Brannigan',
      'Bowman',
      'Beeblebrox',
      'Robinson',
      'Khan',
      'Hollister',
      'Dallas',
      'Rogers',
      'Atomsk',
      'Brak',
      'Riddick',
      'Jet',
    ]
    for (let i = 0; i < 100; i++) {
      this.state.closeStars.push({
        size: Math.random() * 0.3 + 0.2,
        left: Math.random() * 100,
        top: Math.random() * 100,
        opacity: Math.random()+'',
      })
    }
    for (let i = 0; i < 200; i++) {
      this.state.farStars.push({
        size: Math.random() * 0.2 + 0.2,
        left: Math.random() * 100,
        top: Math.random() * 100,
        opacity: Math.random()*0.8+'',
      })
    }

  }
  onMount() {
    this.refreshSaves()
  }
  refreshSaves() {
    // TODO: Load saved files into slots.
    /*window.resolveLocalFileSystemURL(cordova.file.dataDirectory, fs => {
      fs.getDirectory('saves', {create: false}, dir => {
        let reader = dir.createReader()
        reader.readEntries(entries => {
          this.state.slots = []
          entries.forEach(entry => {
            if (entry.name.endsWith('.json')) {
              let saveName = entry.name.slice(0, -5)
              let exists = this.state.slots.indexOf(saveName)
              if (exists === -1) {
                this.state.slots.push(saveName)
              }
            }
          })
        }, err => {
          console.log('err', err)
        })
      }, err => {
        console.log('err', err)
      })
    }, err => {
      console.log('main dir err', err)
    })*/
  }
  handleMain(act) {
    this.state.loc = act
    this.state.captainName = this.captains[Math.floor(Math.random()*this.captains.length)]
    if (act === 'continue') this.refreshSaves()
  }
  handleEmbark(act) {
    if (act === 'embark') {
      store.dispatch(startGame(''))
    } else if (act === 'back') {
      this.state.loc = 'main'
    }
  }
  handleContinue(act) {
    if (act === 'back') {
      this.state.loc = 'main'
    } else if (act === 'embark') {
      if (this.state.selectedSlot < 0 || this.state.selectedSlot >= this.state.slots.length) return
      store.dispatch(startGame(this.state.slots[this.state.selectedSlot]))
    }
  }
  handleSlotSelect(which) {
    this.state.selectedSlot = which
  }
  toggleDeleteMode(slotName) {
    if (slotName === this.state.pendingDeleteSlot) {
      this.state.pendingDeleteSlot = ''
    } else {
      this.state.pendingDeleteSlot = slotName
    }
  }
  deleteSlot(slotName) {
    /*window.resolveLocalFileSystemURL(cordova.file.dataDirectory, fs => {
      fs.getFile(`saves/${slotName}.json`, {create: false}, fileEntry => {
        fileEntry.remove(ok => {
          this.refreshSaves()
        }, err => {
          console.log('deleteSlot', err)
        })
      }, err => {
        console.log('deleteSlot', err)
      })
    }, err => {
      console.log('deleteSlot', err)
    })*/
  }
}

style {
  .Menu {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    color: white;
    animation: fadeIn 1s;
  }
  .Menu__description {
    padding: .5em;
    margin: .5em;
    text-shadow: 0 0 1em blue;
    box-shadow: 0 0 .1em white;
    background: rgba(0, 0, 0, 0.75);
    overflow: auto;
  }
  .Menu__pair {
    display: flex;
    justify-content: center;
  }
  .Menu__item {
    margin: .5em;
    padding: .5em;
    text-transform: uppercase;
  }
  .Menu__inputs {
    display: flex;
    flex-direction: column;
    align-items: stretch;
    justify-content: center;
    padding: .5em;
  }
  .Menu__inputs label {
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 1fr 3fr;
  }
  .Menu__inputs label span {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    text-transform: uppercase;
    padding: .5em;
  }
  .Menu__Main, .Menu__Embark, .Menu__Continue {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    animation: fadeIn 300ms linear 1 forwards;
  }
  .Menu__Main {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: minmax(0, 2fr) minmax(0, 1fr) minmax(0, 1fr) auto;
    grid-gap: 1em;
  }
  .Menu__Main header {
    text-align: center;
    background-image: url(/images/star-runner.svg);
    background-size: contain;
    background-position: center;
    background-repeat: no-repeat;
  }
  .Menu__Main footer {
    font-size: .75em;
    text-align: center;
    opacity: 0.5;
  }
  .Menu__Embark {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto auto auto;
    grid-gap: 1em;
  }
  .Slots {
  }
  .Slots__item {
  }
  .Slots__item.-selected {
    border: 1px solid red;
  }
  /* shiny stuff */
  .Menu__stars {
    position: absolute;
    width: 100vw;
    height: 100vh;
  }
  .Menu__stars.-scrollingSlow {
    animation: starScrolling 80s linear infinite;
  }
  .Menu__stars.-scrollingFast {
    animation: starScrolling 40s linear infinite;
  }

  .Menu__star {
    position: absolute;
    background: #fff;
    border-radius: 1em;
  }
  .Menu__Background {
    position: absolute;
    left: 0;
    top: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    z-index: -1;
    pointer-events: none;
    background: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
  }
  @keyframes starScrolling {
    from {
      transform: translateY(0);
    }
    to {
      transform: translateY(-100%);
    }
  }
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}

section.Menu
  div.Menu__Background
    div.Menu__stars.-scrollingFast
      for|star| of=state.closeStars
        div.Menu__star style={left: star.left+'vw', top: star.top+'vh', width: star.size+'vmin', height: star.size+'vmin', opacity: star.opacity}
        div.Menu__star style={left: star.left+'vw', top: 100+star.top+'vh', width: star.size+'vmin', height: star.size+'vmin', opacity: star.opacity}
    div.Menu__stars.-scrollingSlow
      for|star| of=state.farStars
        div.Menu__star style={left: star.left+'vw', top: star.top+'vh', width: star.size+'vmin', height: star.size+'vmin', opacity: star.opacity}
        div.Menu__star style={left: star.left+'vw', top: 100+star.top+'vh', width: star.size+'vmin', height: star.size+'vmin', opacity: star.opacity}
  Frame active=(state.loc === 'main') slide='right' duration=300 class='Menu__Main'
    header
    button.Menu__item on-click('handleMain', 'embark') -- ${i18next.t('menu:button.embark')}
    button.Menu__item on-click('handleMain', 'continue') -- ${i18next.t('menu:button.continue')}
    footer -- ${pkg.copyright}
  Frame active=(state.loc === 'embark') slide='left' class='Menu__Embark'
    div.Menu__description -- ${i18next.t('menu:description')}
    div.Menu__inputs
      label
        span -- ${i18next.t('menu:label.captain')}
        input placeholder=state.captainName
      label
        span -- ${i18next.t('menu:label.ship')}
        input placeholder='Runner'
    nav.Menu__pair
      button.Menu__item on-click('handleEmbark', 'back') -- ${i18next.t('menu:button.back')}
      button.Menu__item on-click('handleEmbark', 'embark') -- ${i18next.t('menu:button.embark')}
  Frame active=(state.loc === 'continue') slide='left' class='Menu__Continue'
    div.Slots
      for|slotName, slotIndex| of=state.slots
        div.Slots__item class={'-selected': state.selectedSlot===slotIndex} on-click('handleSlotSelect', slotIndex)
          div.Slots__item__name -- ${slotName}
          if(state.pendingDeleteSlot === slotName)
            button.Slots__item__cancel on-click('toggleDeleteMode', slotName) -- ${i18next.t('menu:button.cancel')}
            button.Slots__item__confirm on-click('deleteSlot', slotName) -- ${i18next.t('menu:button.confirm')}
          else
            button.Slots__item__delete on-click('toggleDeleteMode', slotName) -- ${i18next.t('menu:button.delete')}
    nav.Menu__pair
      button.Menu__item on-click('handleContinue', 'back') -- ${i18next.t('menu:button.back')}
      button.Menu__item on-click('handleContinue', 'embark') -- ${i18next.t('menu:button.embark')}